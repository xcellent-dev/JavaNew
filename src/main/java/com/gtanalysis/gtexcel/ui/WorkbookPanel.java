/*
 */
package com.gtanalysis.gtexcel.ui;

import com.gtanalysis.gtexcel.exception.CellNotFoundException;
import com.gtanalysis.gtexcel.model.CellAlignment;
import com.gtanalysis.gtexcel.model.ExcelCellRange;
import com.gtanalysis.gtexcel.model.ExcelChartType;
import com.gtanalysis.gtexcel.model.ExcelTableModel;
import com.gtanalysis.gtexcel.model.FontStyle;
import com.gtanalysis.gtexcel.model.HorizontalCellAlignment;
import com.gtanalysis.gtexcel.model.SortType;
import com.gtanalysis.gtexcel.model.VerticalCellAlignment;
import com.gtanalysis.gtexcel.model.WorkbookModel;
import com.gtanalysis.gtexcel.model.listener.ChartEvent;
import com.gtanalysis.gtexcel.model.listener.WorkbookEvent;
import com.gtanalysis.gtexcel.model.listener.WorkbookListener;
import com.gtanalysis.gtexcel.provider.ExcelDataProvider;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.print.Book;
import java.awt.print.Printable;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.io.File;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import javax.swing.TransferHandler;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.TableColumnModelEvent;
import javax.swing.event.TableColumnModelListener;
import javax.swing.filechooser.FileFilter;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;

/**
 *
 * @author nkabiliravi
 */
public class WorkbookPanel extends javax.swing.JPanel {

    private final WorkbookModel workbookModel = new WorkbookModel();
    private JFileChooser openFileChooser;
    private JFileChooser saveFileChooser;
    private FunctionDialog functionDialog;

    /**
     * Creates new form SheetPanel
     */
    public WorkbookPanel() {
        initComponents();
        initFileChoosers();
        initCustom();

    }

    public SheetPanel getSelectedSheetPanel() {
        return (SheetPanel) this.mainTabbedPanel.getSelectedComponent();
    }

    public WorkbookModel getWorkbookModel() {
        return workbookModel;
    }

    public JTextField getCellValueTextField() {
        return cellValueTextField;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        tabPopupMenu = new javax.swing.JPopupMenu();
        addMenuItem = new javax.swing.JMenuItem();
        removeMenuItem = new javax.swing.JMenuItem();
        tabPopupSeparator = new javax.swing.JPopupMenu.Separator();
        renameMenuItem = new javax.swing.JMenuItem();
        sheetPopupMenu = new javax.swing.JPopupMenu();
        copyMenuItem = new javax.swing.JMenuItem();
        cutMenuItem = new javax.swing.JMenuItem();
        pasteMenuItem = new javax.swing.JMenuItem();
        rowColumnSeparator = new javax.swing.JPopupMenu.Separator();
        insertColumnMenuItem = new javax.swing.JMenuItem();
        insertRowMenuItem = new javax.swing.JMenuItem();
        removeColumnMenuItem = new javax.swing.JMenuItem();
        removeRowMenuItem = new javax.swing.JMenuItem();
        cellDataSeparator = new javax.swing.JPopupMenu.Separator();
        alignmentMenu = new javax.swing.JMenu();
        alignLeftMenuItem = new javax.swing.JMenuItem();
        alignCenterMenuItem = new javax.swing.JMenuItem();
        alignRightMenuItem = new javax.swing.JMenuItem();
        horizontalSeparator = new javax.swing.JPopupMenu.Separator();
        alignTopMenuItem = new javax.swing.JMenuItem();
        alignMiddleMenuItem = new javax.swing.JMenuItem();
        alignBottomMenuItem = new javax.swing.JMenuItem();
        sheetSortMenu = new javax.swing.JMenu();
        sortAscendingMenuItem = new javax.swing.JMenuItem();
        sortDescendingMenuItem = new javax.swing.JMenuItem();
        expressionPanel = new javax.swing.JPanel();
        cellSelectorComboBox = new javax.swing.JComboBox<>();
        functionsButton = new javax.swing.JButton();
        cellValueTextField = new javax.swing.JTextField();
        mainTabbedPanel = new javax.swing.JTabbedPane();

        tabPopupMenu.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
                tabPopupMenuPopupMenuWillBecomeVisible(evt);
            }
        });

        addMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/16x16/page-white_add.png"))); // NOI18N
        addMenuItem.setText("Add");
        addMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addMenuItemActionPerformed(evt);
            }
        });
        tabPopupMenu.add(addMenuItem);

        removeMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/16x16/edit-delete-2.png"))); // NOI18N
        removeMenuItem.setText("Remove");
        removeMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeMenuItemActionPerformed(evt);
            }
        });
        tabPopupMenu.add(removeMenuItem);
        tabPopupMenu.add(tabPopupSeparator);

        renameMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/16x16/edit-rename.png"))); // NOI18N
        renameMenuItem.setText("Rename");
        renameMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                renameMenuItemActionPerformed(evt);
            }
        });
        tabPopupMenu.add(renameMenuItem);

        copyMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/16x16/edit-copy-3.png"))); // NOI18N
        copyMenuItem.setMnemonic('y');
        copyMenuItem.setText("Copy");
        copyMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyMenuItemActionPerformed(evt);
            }
        });
        sheetPopupMenu.add(copyMenuItem);

        cutMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/16x16/edit-cut-5.png"))); // NOI18N
        cutMenuItem.setMnemonic('t');
        cutMenuItem.setText("Cut");
        cutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cutMenuItemActionPerformed(evt);
            }
        });
        sheetPopupMenu.add(cutMenuItem);

        pasteMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/16x16/edit-paste-3.png"))); // NOI18N
        pasteMenuItem.setMnemonic('p');
        pasteMenuItem.setText("Paste");

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${pasteEnabled}"), pasteMenuItem, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        pasteMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pasteMenuItemActionPerformed(evt);
            }
        });
        sheetPopupMenu.add(pasteMenuItem);
        sheetPopupMenu.add(rowColumnSeparator);

        insertColumnMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        insertColumnMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/16x16/insert-table-column.png"))); // NOI18N
        insertColumnMenuItem.setText("Insert Column");
        insertColumnMenuItem.setToolTipText("");
        insertColumnMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertColumnMenuItemActionPerformed(evt);
            }
        });
        sheetPopupMenu.add(insertColumnMenuItem);

        insertRowMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        insertRowMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/16x16/insert-table-row.png"))); // NOI18N
        insertRowMenuItem.setText("Insert Row");
        insertRowMenuItem.setToolTipText("");
        insertRowMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertRowMenuItemActionPerformed(evt);
            }
        });
        sheetPopupMenu.add(insertRowMenuItem);

        removeColumnMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        removeColumnMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/16x16/table-column-delete.png"))); // NOI18N
        removeColumnMenuItem.setText("Remove Column");
        removeColumnMenuItem.setToolTipText("");
        removeColumnMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeColumnMenuItemActionPerformed(evt);
            }
        });
        sheetPopupMenu.add(removeColumnMenuItem);

        removeRowMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        removeRowMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/16x16/table-row-delete.png"))); // NOI18N
        removeRowMenuItem.setText("Remove Row");
        removeRowMenuItem.setToolTipText("");
        removeRowMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeRowMenuItemActionPerformed(evt);
            }
        });
        sheetPopupMenu.add(removeRowMenuItem);
        sheetPopupMenu.add(cellDataSeparator);

        alignmentMenu.setText("Alignment");

        alignLeftMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/16x16/format-text-align-left.png"))); // NOI18N
        alignLeftMenuItem.setText("Left");
        alignLeftMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alignLeftMenuItemActionPerformed(evt);
            }
        });
        alignmentMenu.add(alignLeftMenuItem);

        alignCenterMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/16x16/format-text-align-center.png"))); // NOI18N
        alignCenterMenuItem.setText("Center");
        alignCenterMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alignCenterMenuItemActionPerformed(evt);
            }
        });
        alignmentMenu.add(alignCenterMenuItem);

        alignRightMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/16x16/format-text-align-right.png"))); // NOI18N
        alignRightMenuItem.setText("Right");
        alignRightMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alignRightMenuItemActionPerformed(evt);
            }
        });
        alignmentMenu.add(alignRightMenuItem);
        alignmentMenu.add(horizontalSeparator);

        alignTopMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/16x16/align-vertical-top.png"))); // NOI18N
        alignTopMenuItem.setText("Top");
        alignTopMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alignTopMenuItemActionPerformed(evt);
            }
        });
        alignmentMenu.add(alignTopMenuItem);

        alignMiddleMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/16x16/align-text-middle.png"))); // NOI18N
        alignMiddleMenuItem.setText("Middlle");
        alignMiddleMenuItem.setToolTipText("");
        alignMiddleMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alignMiddleMenuItemActionPerformed(evt);
            }
        });
        alignmentMenu.add(alignMiddleMenuItem);

        alignBottomMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/16x16/align-vertical-bottom.png"))); // NOI18N
        alignBottomMenuItem.setText("Bottom");
        alignBottomMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alignBottomMenuItemActionPerformed(evt);
            }
        });
        alignmentMenu.add(alignBottomMenuItem);

        sheetPopupMenu.add(alignmentMenu);

        sheetSortMenu.setText("Sort Column");

        sortAscendingMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/16x16/edit-sort-increase.png"))); // NOI18N
        sortAscendingMenuItem.setText("Ascending");
        sortAscendingMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortAscendingMenuItemActionPerformed(evt);
            }
        });
        sheetSortMenu.add(sortAscendingMenuItem);

        sortDescendingMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/16x16/edit-sort-decrease.png"))); // NOI18N
        sortDescendingMenuItem.setText("Descending");
        sortDescendingMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortDescendingMenuItemActionPerformed(evt);
            }
        });
        sheetSortMenu.add(sortDescendingMenuItem);

        sheetPopupMenu.add(sheetSortMenu);

        setLayout(new java.awt.GridBagLayout());

        expressionPanel.setLayout(new java.awt.GridBagLayout());

        cellSelectorComboBox.setEditable(true);
        cellSelectorComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cellSelectorComboBoxItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        expressionPanel.add(cellSelectorComboBox, gridBagConstraints);

        functionsButton.setText("f(x)");
        functionsButton.setPreferredSize(new java.awt.Dimension(50, 29));
        functionsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                functionsButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        expressionPanel.add(functionsButton, gridBagConstraints);

        cellValueTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                cellValueTextFieldKeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        expressionPanel.add(cellValueTextField, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        add(expressionPanel, gridBagConstraints);

        mainTabbedPanel.setTabPlacement(javax.swing.JTabbedPane.BOTTOM);
        mainTabbedPanel.setComponentPopupMenu(tabPopupMenu);
        mainTabbedPanel.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                mainTabbedPanelStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(mainTabbedPanel, gridBagConstraints);

        bindingGroup.bind();
    }// </editor-fold>//GEN-END:initComponents

    private void cellSelectorComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cellSelectorComboBoxItemStateChanged
        if (evt.getItem() != null) {
            String strValue = evt.getItem().toString();
            selectTableCell(strValue);
        }
    }//GEN-LAST:event_cellSelectorComboBoxItemStateChanged

    private void cellValueTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cellValueTextFieldKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            setCellValue();
        }
    }//GEN-LAST:event_cellValueTextFieldKeyReleased

    public void setCellValue() {
        Component component = this.mainTabbedPanel.getSelectedComponent();
        if (component instanceof SheetPanel) {
            JTable excelTable = ((SheetPanel) component).getExcelTable();
            if (excelTable.getSelectedColumn() > -1
                    && excelTable.getSelectedRow() > -1) {
                excelTable.getModel().setValueAt(cellValueTextField.getText(),
                        excelTable.getSelectedRow(),
                        excelTable.getSelectedColumn());
            }
        }
    }

    private void addMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addMenuItemActionPerformed
        newSheet();
    }//GEN-LAST:event_addMenuItemActionPerformed

    private void renameMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_renameMenuItemActionPerformed
        renameSheet();
    }//GEN-LAST:event_renameMenuItemActionPerformed

    private void removeMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeMenuItemActionPerformed
        removeSheet();
    }//GEN-LAST:event_removeMenuItemActionPerformed

    private void tabPopupMenuPopupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_tabPopupMenuPopupMenuWillBecomeVisible
        renameMenuItem.setVisible(true);
        addMenuItem.setVisible(true);
        tabPopupSeparator.setVisible(false);
        removeMenuItem.setVisible(false);
        if (mainTabbedPanel.getTabCount() > 1) {
            tabPopupSeparator.setVisible(true);
            removeMenuItem.setVisible(true);
        }
        int selectedIndex = mainTabbedPanel.getSelectedIndex();
        if (selectedIndex > -1
                && mainTabbedPanel.getTitleAt(selectedIndex).equalsIgnoreCase(ExcelDataProvider.CHARTS_METADATA_SHEET_NAME)) {
            renameMenuItem.setVisible(false);
            removeMenuItem.setVisible(false);
            addMenuItem.setVisible(false);
            tabPopupSeparator.setVisible(false);
        }
    }//GEN-LAST:event_tabPopupMenuPopupMenuWillBecomeVisible

    private void functionsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_functionsButtonActionPerformed
        functionDialog = new FunctionDialog(this.cellValueTextField.getText(), true);
        functionDialog.setLocationRelativeTo(this);
        functionDialog.setVisible(true);
        if (functionDialog.getDialogResult() == JOptionPane.OK_OPTION) {
            this.cellValueTextField.setText(functionDialog.getExpression());
            setCellValue();
        }
    }//GEN-LAST:event_functionsButtonActionPerformed

    private void mainTabbedPanelStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_mainTabbedPanelStateChanged
        firePropertyChange("chartPanelVisible", !isChartPanelVisible(), isChartPanelVisible());
        firePropertyChange("chartSelected", !isChartSelected(), isChartSelected());
    }//GEN-LAST:event_mainTabbedPanelStateChanged

    private void copyMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyMenuItemActionPerformed
        copy();
    }//GEN-LAST:event_copyMenuItemActionPerformed

    private void cutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cutMenuItemActionPerformed
        cut();
    }//GEN-LAST:event_cutMenuItemActionPerformed

    private void pasteMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pasteMenuItemActionPerformed
        paste();
    }//GEN-LAST:event_pasteMenuItemActionPerformed

    private void alignLeftMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alignLeftMenuItemActionPerformed
        alignHorizontalLeft();
    }//GEN-LAST:event_alignLeftMenuItemActionPerformed

    private void alignCenterMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alignCenterMenuItemActionPerformed
        alignHorizontalCenter();
    }//GEN-LAST:event_alignCenterMenuItemActionPerformed

    private void alignRightMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alignRightMenuItemActionPerformed
        alignHorizontalRight();
    }//GEN-LAST:event_alignRightMenuItemActionPerformed

    private void alignTopMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alignTopMenuItemActionPerformed
        alignVerticalTop();
    }//GEN-LAST:event_alignTopMenuItemActionPerformed

    private void alignMiddleMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alignMiddleMenuItemActionPerformed
        alignVerticalMiddle();
    }//GEN-LAST:event_alignMiddleMenuItemActionPerformed

    private void alignBottomMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alignBottomMenuItemActionPerformed
        alignVerticalBottom();
    }//GEN-LAST:event_alignBottomMenuItemActionPerformed

    private void sortAscendingMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortAscendingMenuItemActionPerformed
        sort(SortType.ASCENDING);
    }//GEN-LAST:event_sortAscendingMenuItemActionPerformed

    private void sortDescendingMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortDescendingMenuItemActionPerformed
        sort(SortType.DISCENDING);
    }//GEN-LAST:event_sortDescendingMenuItemActionPerformed

    private void insertColumnMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertColumnMenuItemActionPerformed
        insertColumn();
    }//GEN-LAST:event_insertColumnMenuItemActionPerformed

    private void insertRowMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertRowMenuItemActionPerformed
        insertRow();
    }//GEN-LAST:event_insertRowMenuItemActionPerformed

    private void removeColumnMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeColumnMenuItemActionPerformed
        removeColumn();
    }//GEN-LAST:event_removeColumnMenuItemActionPerformed

    private void removeRowMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeRowMenuItemActionPerformed
        removeRow();
    }//GEN-LAST:event_removeRowMenuItemActionPerformed

    private void removeSheet() {
        int sheetIndex = mainTabbedPanel.getSelectedIndex();
        String sheetName = mainTabbedPanel.getTitleAt(sheetIndex);
        if (sheetName != null) {
            int optionOutcome = JOptionPane.showConfirmDialog(this, "Do you want to remove this sheet: '" + sheetName + "'?",
                    "Remove Confirmation",
                    JOptionPane.YES_NO_OPTION
            );
            switch (optionOutcome) {
                case JOptionPane.YES_OPTION:
                    mainTabbedPanel.remove(sheetIndex);
                    workbookModel.getWorkbook().removeSheetAt(sheetIndex);
                    break;
                default:
            }
        }
    }

    private void newSheet() {
        String defaultSheetName = workbookModel.generateNewDefaultSheetName();
        String inputValue = JOptionPane.showInputDialog(this, "Enter New Sheet Name:", defaultSheetName);
        if (inputValue != null) {
            try {
                newSheetPanel(workbookModel.createExcelTableModel(inputValue));
                mainTabbedPanel.setSelectedIndex(mainTabbedPanel.getTabCount() - 1);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private void renameSheet() {
        String sheetName = mainTabbedPanel.getTitleAt(mainTabbedPanel.getSelectedIndex());
        String inputValue = JOptionPane.showInputDialog(this, "Rename Sheet Name as:", sheetName);
        if (inputValue != null) {
            try {
                workbookModel.getWorkbook().setSheetName(mainTabbedPanel.getSelectedIndex(), inputValue);
                mainTabbedPanel.setTitleAt(mainTabbedPanel.getSelectedIndex(), inputValue);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem addMenuItem;
    private javax.swing.JMenuItem alignBottomMenuItem;
    private javax.swing.JMenuItem alignCenterMenuItem;
    private javax.swing.JMenuItem alignLeftMenuItem;
    private javax.swing.JMenuItem alignMiddleMenuItem;
    private javax.swing.JMenuItem alignRightMenuItem;
    private javax.swing.JMenuItem alignTopMenuItem;
    private javax.swing.JMenu alignmentMenu;
    private javax.swing.JPopupMenu.Separator cellDataSeparator;
    private javax.swing.JComboBox<String> cellSelectorComboBox;
    private javax.swing.JTextField cellValueTextField;
    private javax.swing.JMenuItem copyMenuItem;
    private javax.swing.JMenuItem cutMenuItem;
    private javax.swing.JPanel expressionPanel;
    private javax.swing.JButton functionsButton;
    private javax.swing.JPopupMenu.Separator horizontalSeparator;
    private javax.swing.JMenuItem insertColumnMenuItem;
    private javax.swing.JMenuItem insertRowMenuItem;
    private javax.swing.JTabbedPane mainTabbedPanel;
    private javax.swing.JMenuItem pasteMenuItem;
    private javax.swing.JMenuItem removeColumnMenuItem;
    private javax.swing.JMenuItem removeMenuItem;
    private javax.swing.JMenuItem removeRowMenuItem;
    private javax.swing.JMenuItem renameMenuItem;
    private javax.swing.JPopupMenu.Separator rowColumnSeparator;
    private javax.swing.JPopupMenu sheetPopupMenu;
    private javax.swing.JMenu sheetSortMenu;
    private javax.swing.JMenuItem sortAscendingMenuItem;
    private javax.swing.JMenuItem sortDescendingMenuItem;
    private javax.swing.JPopupMenu tabPopupMenu;
    private javax.swing.JPopupMenu.Separator tabPopupSeparator;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    public void openFile() {
        int returnVal = openFileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            loadWorkbook(openFileChooser.getSelectedFile());
            saveFileChooser.setSelectedFile(openFileChooser.getSelectedFile());
        }
    }

    public void saveFile() {
        if (workbookModel.getWorkbook() != null) {
            if (saveFileChooser.getSelectedFile() != null) {
                saveWorkbook(saveFileChooser.getSelectedFile());
            } else if (saveFileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
                saveWorkbook(saveFileChooser.getSelectedFile());
            }
        }
    }

    public void saveFileAs() {
        if (workbookModel.getWorkbook() != null) {
            if (saveFileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
                saveWorkbook(saveFileChooser.getSelectedFile());
            }
        }
    }

    public boolean closeFile() {
        if (workbookModel.getWorkbook() != null) {
            int optionOutcome = JOptionPane.showConfirmDialog(this, "Do you want to save this workbook?",
                    "Save Confirmation",
                    JOptionPane.YES_NO_CANCEL_OPTION);
            switch (optionOutcome) {
                case JOptionPane.YES_OPTION:
                    saveFile();
                case JOptionPane.NO_OPTION:
                    closeWorkbook();
                    return true;
                default:
                    return false;
            }
        } else {
            return true;
        }
    }

    public void exitApplication() {
        closeFile();
    }

    public void exportToExcelCSV() {
        if (workbookModel.getWorkbook() != null) {
            JFileChooser exportFileChooser = newExportFileChooser("csv", "Excel CSV", "Export to CSV (Excel)");
            if (exportFileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
                workbookModel.exportToExcelCSV(exportFileChooser.getSelectedFile());
            }
        }
    }

    public void exportToUnixCSV() {
        if (workbookModel.getWorkbook() != null) {
            JFileChooser exportFileChooser = newExportFileChooser("csv", "Unix CSV", "Export to CSV (Unix)");
            if (exportFileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
                workbookModel.exportToUnixCSV(exportFileChooser.getSelectedFile());
            }
        }
    }

    public void loadWorkbook(File file) {
        mainTabbedPanel.removeAll();
        workbookModel.loadWorkbook(file);
        workbookModel.getTableModels().stream().forEach((excelTableModel) -> {
            newSheetPanel(excelTableModel);
        });
    }

    public void saveWorkbook(File file) {
        for (Component component : mainTabbedPanel.getComponents()) {
            if (component instanceof SheetPanel) {
                SheetPanel sheetPanel = (SheetPanel) component;
                sheetPanel.storeCellsSize();
            }
        }
        workbookModel.saveWorkbook(file);
    }

    public void closeWorkbook() {
        mainTabbedPanel.removeAll();
        workbookModel.closeWorkbook();
        saveFileChooser.setSelectedFile(null);
        cellSelectorComboBox.getModel().setSelectedItem(null);
        cellValueTextField.setText(null);
    }

    private void changeBarValues(SheetPanel sheetPanel) {
        cellSelectorComboBox.getEditor().setItem(null);
        ExcelTable table = sheetPanel.getExcelTable();
        ExcelTableModel tableModel = (ExcelTableModel) table.getModel();
        int selectedColumn = table.getSelectedColumn();
        int selectedRow = table.getSelectedRow();
        if (selectedColumn >= 0 && selectedColumn < tableModel.getColumnCount()
                && selectedRow >= 0 && selectedRow < tableModel.getRowCount()
                && selectedColumn < table.getTableHeader().getColumnModel().getColumnCount()) {
            TableColumn tableColumn = table.getTableHeader().getColumnModel().getColumn(selectedColumn);
            String cellName = tableColumn.getHeaderValue().toString() + (selectedRow + 1);
            cellSelectorComboBox.getEditor().setItem(cellName);
            cellValueTextField.setText(tableModel.getEditableCellValue(selectedRow, selectedColumn));
        }
        table.getTableHeader().repaint();
        table.getRowHeader().repaint();
    }

    public void newSheetPanel(ExcelTableModel excelTableModel) {
        Sheet sheet = excelTableModel.getSheet();
        Workbook workbook = sheet.getWorkbook();
        if (!workbook.isSheetHidden(workbook.getSheetIndex(sheet))) {
            SheetPanel sheetPanel = new SheetPanel(this);
            sheetPanel.setExcelTableModel(excelTableModel);
            ListSelectionModel listSelectionModel = sheetPanel.getExcelTable().getSelectionModel();
            listSelectionModel.addListSelectionListener((ListSelectionEvent e) -> {
                changeBarValues(sheetPanel);
            });

            sheetPanel.getExcelTable().addMouseListener(new MouseAdapter() {
                @Override
                public void mouseClicked(MouseEvent e) {
                    if (e.getButton() == MouseEvent.BUTTON3) {
                        sheetPopupMenu.show(sheetPanel.getExcelTable(), e.getX(), e.getY());
                    }
                }

            });
            sheetPanel.loadCellsSize();
            sheetPanel.getExcelTable().getColumnModel().addColumnModelListener(new TableColumnModelListener() {
                @Override
                public void columnAdded(TableColumnModelEvent e) {
                    changeBarValues(sheetPanel);
                }

                @Override
                public void columnRemoved(TableColumnModelEvent e) {
                    changeBarValues(sheetPanel);
                }

                @Override
                public void columnMoved(TableColumnModelEvent e) {
                    changeBarValues(sheetPanel);
                }

                @Override
                public void columnMarginChanged(ChangeEvent e) {
                    changeBarValues(sheetPanel);
                }

                @Override
                public void columnSelectionChanged(ListSelectionEvent e) {
                    changeBarValues(sheetPanel);
                }
            });
            sheetPanel.addChartListener((ChartEvent evt) -> {
                firePropertyChange("chartSelected", !isChartSelected(), isChartSelected());
            });
            mainTabbedPanel.addTab(excelTableModel.getSheet().getSheetName(), sheetPanel);
        }
    }

    private void initFileChoosers() {
        openFileChooser = newFileChooser(JFileChooser.OPEN_DIALOG);
        saveFileChooser = newFileChooser(JFileChooser.SAVE_DIALOG);
    }

    private JFileChooser newExportFileChooser(String extension,
            String extenstionDescription, String dialogTitle) {
        JFileChooser fc = new JFileChooser(new File("."));
        fc.setDialogTitle(dialogTitle);
        fc.setDialogType(JFileChooser.SAVE_DIALOG);
        fc.setAcceptAllFileFilterUsed(false);
        fc.setApproveButtonText("Export");
        fc.setApproveButtonToolTipText(dialogTitle);

        fc.addChoosableFileFilter(new FileFilter() {
            @Override
            public boolean accept(File f) {
                return f.isDirectory() || f.getName().endsWith(".xlsx");
            }

            @Override
            public String getDescription() {
                return extenstionDescription + " (." + extension + ")";
            }
        });

        return fc;
    }

    private JFileChooser newFileChooser(int fileChooserType) {
        JFileChooser fc = new JFileChooser(new File("."));
        fc.setDialogType(fileChooserType);
        fc.setAcceptAllFileFilterUsed(false);

        fc.addChoosableFileFilter(new FileFilter() {
            @Override
            public boolean accept(File f) {
                return f.isDirectory() || f.getName().endsWith(".xlsx");
            }

            @Override
            public String getDescription() {
                return "Microsoft Office Excel 2007+ (.xlsx)";
            }
        });

        fc.addChoosableFileFilter(new FileFilter() {
            @Override
            public boolean accept(File f) {
                return f.isDirectory() || f.getName().endsWith(".xls");
            }

            @Override
            public String getDescription() {
                return "Microsoft Office Excel (1994-2004) (.xls)";
            }
        });
        return fc;
    }

    private void selectTableCell(String strValue) throws NumberFormatException {
        String regex = "([a-z,A-Z]+)([0-9]+)";
        Pattern pattern = Pattern.compile(regex);
        Matcher matcher = pattern.matcher(strValue);
        if (matcher.find()) {
            String columnValue = matcher.group(1);
            String rowValue = matcher.group(2);
            Component component = this.mainTabbedPanel.getSelectedComponent();
            if (component instanceof SheetPanel) {
                JTable excelTable = ((SheetPanel) component).getExcelTable();

                int columnIndex = findColumnIndex(excelTable, columnValue);
                int rowIndex = Integer.parseInt(rowValue);
                int rowCount = excelTable.getModel().getRowCount();
                int columnCount = excelTable.getModel().getColumnCount();

                rowIndex--;
                if (rowIndex > -1 && rowIndex < rowCount
                        && columnIndex > -1 && columnIndex < columnCount) {
                    excelTable.
                            setColumnSelectionInterval(columnIndex, columnIndex);
                    excelTable.
                            setRowSelectionInterval(rowIndex, rowIndex);
                }
            }

        }
    }

    private int findColumnIndex(JTable excelTable, String columnValue) {
        TableColumnModel tableColumnModel = excelTable.getTableHeader().getColumnModel();
        int columnCount = tableColumnModel.getColumnCount();
        int columnIndex = -1;
        for (int i = 0; i < columnCount; i++) {
            TableColumn tableColumn = tableColumnModel.getColumn(i);
            if (columnValue.equalsIgnoreCase(tableColumn.getHeaderValue().toString())) {
                columnIndex = i;
                break;
            }
        }
        return columnIndex;
    }

    private ExcelTable findSelectedExcelTable() {
        Component component = this.mainTabbedPanel.getSelectedComponent();
        if (component instanceof SheetPanel) {
            return ((SheetPanel) component).getExcelTable();
        }
        return null;
    }

    public void insertColumn() {
        ExcelTable excelTable = findSelectedExcelTable();
        if (excelTable != null) {
            ExcelTableModel excelTableModel = (ExcelTableModel) excelTable.getModel();
            if (excelTable.getSelectedColumn() > -1) {
                excelTableModel.insertColumn(excelTable.getSelectedColumn() + 1);
            } else {
                excelTableModel.insertColumn(excelTable.getColumnCount());
            }
        }
    }

    public void insertRow() {
        ExcelTable excelTable = findSelectedExcelTable();
        if (excelTable != null) {
            ExcelTableModel excelTableModel = (ExcelTableModel) excelTable.getModel();
            if (excelTable.getSelectedRow() > -1) {
                excelTableModel.insertRow(excelTable.getSelectedRow() + 1);
            } else {
                excelTableModel.insertRow(excelTable.getRowCount());
            }
        }
    }

    public void removeColumn() {
        ExcelTable excelTable = findSelectedExcelTable();
        if (excelTable != null) {
            ExcelTableModel excelTableModel = (ExcelTableModel) excelTable.getModel();
            excelTableModel.removeColumn(excelTable.getSelectedColumn());
        }
    }

    public void removeRow() {
        ExcelTable excelTable = findSelectedExcelTable();
        if (excelTable != null) {
            ExcelTableModel excelTableModel = (ExcelTableModel) excelTable.getModel();
            excelTableModel.removeRow(excelTable.getSelectedRow());
        }
    }

    public void newWorkbook() {
        if (closeFile()) {
            workbookModel.newWorkbook();
            newSheetPanel(workbookModel.createExcelTableModel("Sheet 1"));
            newSheetPanel(workbookModel.createExcelTableModel("Sheet 2"));
            newSheetPanel(workbookModel.createExcelTableModel("Sheet 3"));
            expressionPanel.setVisible(true);
        }
    }

    public void newWorkbook(int numberOfSheets) {
        if (closeFile()) {
            workbookModel.newWorkbook();
            for (int i = 1; i < numberOfSheets; i++) {
                newSheetPanel(workbookModel.createExcelTableModel("Sheet " + i));
            }
            expressionPanel.setVisible(true);
        }
    }

    public void newWorkbook(String firstSheetName) {
        if (closeFile()) {
            workbookModel.newWorkbook();
            newSheetPanel(workbookModel.createExcelTableModel(firstSheetName));
            expressionPanel.setVisible(true);
        }
    }

    private void alignCell(CellAlignment alignment) {
        ExcelTable excelTable = findSelectedExcelTable();
        if (excelTable != null) {
            ExcelTableModel excelTableModel = (ExcelTableModel) excelTable.getModel();
            if (excelTable.getSelectedColumn() > -1 && excelTable.getSelectedRow() > -1) {
                excelTableModel.alignCell(excelTable.getSelectedColumn(),
                        excelTable.getSelectedRow(), alignment);
            }
        }
    }

    public void alignHorizontalLeft() {
        alignCell(HorizontalCellAlignment.LEFT);
    }

    public void alignHorizontalCenter() {
        alignCell(HorizontalCellAlignment.HORIZONTAL_CENTER);
    }

    public void alignHorizontalRight() {
        alignCell(HorizontalCellAlignment.RIGHT);
    }

    public void alignVerticalBottom() {
        alignCell(VerticalCellAlignment.BOTTOM);
    }

    public void alignVerticalMiddle() {
        alignCell(VerticalCellAlignment.VERTICAL_CENTER);
    }

    public void alignVerticalTop() {
        alignCell(VerticalCellAlignment.TOP);
    }

    public void styleItalic() {
        styleFont(FontStyle.ITALIC);
    }

    public void styleBold() {
        styleFont(FontStyle.BOLD);
    }

    public void styleUnderline() {
        styleFont(FontStyle.UNDERLINE);
    }

    private void styleFont(FontStyle fontSytle) {
        ExcelTable excelTable = findSelectedExcelTable();
        if (excelTable != null) {
            ExcelTableModel excelTableModel = (ExcelTableModel) excelTable.getModel();
            if (excelTable.getSelectedColumn() > -1 && excelTable.getSelectedRow() > -1) {
                excelTableModel.styleFont(excelTable.getSelectedColumn(),
                        excelTable.getSelectedRow(), fontSytle);
            }
        }
    }

    public void sort(SortType sortType) {
        ExcelTable excelTable = findSelectedExcelTable();
        if (excelTable != null) {
            ExcelTableModel excelTableModel = (ExcelTableModel) excelTable.getModel();
            if (excelTable.getSelectedColumn() > -1) {
                int result = JOptionPane.showConfirmDialog(this,
                        "Are you going to sort all the other columns respectively?",
                        "Sort Confirmation", JOptionPane.YES_NO_CANCEL_OPTION);
                if (result != JOptionPane.CANCEL_OPTION) {
                    excelTableModel.sort(excelTable.getSelectedColumn(),
                            sortType,
                            result == JOptionPane.YES_OPTION ? true : false);
                }
            }
        }
    }

    public void addWorkbookListener(WorkbookListener listener) {
        this.workbookModel.addWorkbookListener(listener);
    }

    public void removeWorkbookListener(WorkbookListener listener) {
        this.workbookModel.removeWorkbookListener(listener);
    }

    public boolean isWorkbookVisible() {
        return this.workbookModel.getWorkbook() != null;
    }

    private void initCustom() {
        setWorkbookComponentsVisible(false);
        this.workbookModel.addWorkbookListener(new WorkbookListener() {
            @Override
            public void workbookCreated(WorkbookEvent evt) {
                setWorkbookComponentsVisible(true);
            }

            @Override
            public void workbookLoaded(WorkbookEvent evt) {
                setWorkbookComponentsVisible(true);
            }

            @Override
            public void workbookSaved(WorkbookEvent evt) {
            }

            @Override
            public void workbookClosed(WorkbookEvent evt) {
                setWorkbookComponentsVisible(false);
            }
        });

    }

    private void setWorkbookComponentsVisible(boolean visible) {
        expressionPanel.setVisible(visible);
        firePropertyChange("workbookVisible", !visible, visible);
    }

    public void addChart() {
        ChartEditDialog chartEditDialog = new ChartEditDialog(
                (SheetPanel) this.mainTabbedPanel.getSelectedComponent(),
                true,
                false);
        chartEditDialog.setSize(new Dimension(800, 540));
        chartEditDialog.setLocationRelativeTo(this);
        chartEditDialog.setVisible(true);
    }

    public boolean isChartSelected() {
        SheetPanel sheetPanel = (SheetPanel) this.mainTabbedPanel.getSelectedComponent();
        return sheetPanel != null && sheetPanel.getSelectedChartModel() != null;
    }

    public void editChart() {
        if (isChartSelected()) {
            SheetPanel sheetPanel = (SheetPanel) this.mainTabbedPanel.getSelectedComponent();
            ChartEditDialog chartEditDialog = new ChartEditDialog(
                    sheetPanel,
                    true,
                    true);
            chartEditDialog.setSize(new Dimension(800, 540));
            chartEditDialog.setLocationRelativeTo(this);
            chartEditDialog.setVisible(true);
        }
    }

    public void removeChart() {
        SheetPanel sheetPanel = (SheetPanel) this.mainTabbedPanel.getSelectedComponent();
        String chartTitle = sheetPanel.getSelectedChartTitle();
        if (chartTitle != null) {
            String message = "Do you want to delete the selected chart '"
                    + chartTitle
                    + "'";
            if (JOptionPane.showConfirmDialog(this,
                    message, "Delete", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                sheetPanel.removeSelectedChart();
            }
        }
    }

    public boolean isChartPanelVisible() {
        Component component = this.mainTabbedPanel.getSelectedComponent();
        if (component instanceof SheetPanel) {
            return ((SheetPanel) component).isChartPanelVisible();
        }
        return false;
    }

    public void setChartPanelVisible(boolean visible) {
        SheetPanel sheetPanel = (SheetPanel) this.mainTabbedPanel.getSelectedComponent();
        if (sheetPanel != null) {
            sheetPanel.setChartPanelVisible(visible);
            firePropertyChange("chartPanelVisible", !isChartPanelVisible(), isChartPanelVisible());
        }
    }

    public void createChart(String chartTitle,
            ExcelChartType chartType,
            ExcelCellRange xlabelRange,
            ExcelCellRange ylabelRange,
            List<ExcelCellRange> xDataRanges,
            List<ExcelCellRange> yDataRanges) {
        Component component = this.mainTabbedPanel.getSelectedComponent();
        if (component instanceof SheetPanel) {
            ((SheetPanel) component).createChart(chartTitle,
                    chartType,
                    xlabelRange,
                    ylabelRange,
                    xDataRanges,
                    yDataRanges);
        }
    }

    public String[] retrieveSheetCellNames(String sheetName) {
        Component[] components = this.mainTabbedPanel.getComponents();
        for (Component comp : components) {
            if (comp instanceof SheetPanel) {
                SheetPanel sheetPanel = (SheetPanel) comp;
                if (sheetPanel.getSheetName().equals(sheetName)) {
                    return sheetPanel.retrieveCellNames();
                }
            }
        }
        return new String[0];
    }

    public void print() {
        SheetPanel sheetPanel = getSelectedSheetPanel();
        List<Printable> chartPrintables = sheetPanel.getPrintableChartPanels();
        Printable tablePrintable = sheetPanel.getExcelTable().getPrintable(
                JTable.PrintMode.FIT_WIDTH, null, null);
        PrinterJob job = PrinterJob.getPrinterJob();
        Book book = new Book();
        book.append(tablePrintable, job.defaultPage());
        chartPrintables.stream().forEach((chartPrintable) -> {
            book.append(chartPrintable, job.defaultPage());
        });
        job.setPageable(book);
        boolean ok = job.printDialog();
        if (ok) {
            try {
                job.print();
            } catch (PrinterException ex) {
                JOptionPane.showConfirmDialog(this, ex.getMessage());
            }
        }
    }

    public void undo() {
        workbookModel.undo();
        firePropertyChange("undoEnabled", !isUndoEnabled(), isUndoEnabled());
        firePropertyChange("redoEnabled", !isRedoEnabled(), isRedoEnabled());
    }

    public void redo() {
        workbookModel.redo();
        firePropertyChange("undoEnabled", !isUndoEnabled(), isUndoEnabled());
        firePropertyChange("redoEnabled", !isRedoEnabled(), isRedoEnabled());
    }

    public boolean isUndoEnabled() {
        return this.workbookModel.isUndoEnabled();
    }

    public boolean isRedoEnabled() {
        return this.workbookModel.isRedoEnabled();
    }

    public void copy() {
        ExcelTable excelTable = findSelectedExcelTable();
        if (excelTable != null) {
            excelTable.copy();
            firePropertyChange("pasteEnabled", !isPasteEnabled(), isPasteEnabled());
        }
    }

    public void cut() {
        ExcelTable excelTable = findSelectedExcelTable();
        if (excelTable != null) {
            excelTable.cut();
            firePropertyChange("pasteEnabled", !isPasteEnabled(), isPasteEnabled());
        }
    }

    public void paste() {
        ExcelTable excelTable = findSelectedExcelTable();
        if (excelTable != null) {
            excelTable.paste();
            firePropertyChange("pasteEnabled", !isPasteEnabled(), isPasteEnabled());
        }
    }

    public boolean isPasteEnabled() {
        ExcelTable excelTable = findSelectedExcelTable();
        if (excelTable != null) {
            return excelTable.isPasteEnabled();
        }
        return false;
    }

    public boolean isCellSelected() {
        ExcelTable excelTable = findSelectedExcelTable();
        if (excelTable != null) {
            return excelTable.getSelectedRow() > 0 && excelTable.getSelectedColumn() > 0;
        }
        return false;
    }

    public void findAndReplace() {
        FindAndReplaceDialog findAndReplaceDialog = new FindAndReplaceDialog(this);
        findAndReplaceDialog.showDialog();
    }

    public void findAndReplace(String searchFor,
            String replaceText,
            boolean matchCase,
            boolean regex,
            boolean searchAllSheets,
            boolean searchHorizontally,
            boolean backward,
            boolean replace) {
        if (searchAllSheets) {
            findAndReplaceInAllSheets(searchFor, replaceText, matchCase, regex, searchHorizontally, backward, replace);
        } else {
            findAndReplaceInSelectedSheet(searchFor, replaceText, matchCase, regex, searchHorizontally, backward, replace);
        }
    }

    private void findAndReplaceInAllSheets(String searchFor,
            String replaceText,
            boolean matchCase,
            boolean regex,
            boolean searchHorizontally,
            boolean backward,
            boolean replace) {
        int i = mainTabbedPanel.getSelectedIndex();
        if (backward) {
            while (i >= 0) {
                try {
                    findAndReplaceInSheet(i,
                            searchFor,
                            replaceText,
                            matchCase,
                            regex,
                            searchHorizontally,
                            backward,
                            replace);
                    return;
                } catch (CellNotFoundException ex) {
                    i--;
                }
            }
            if (i < 0) {
                throw new CellNotFoundException();
            }
        } else {
            while (i < mainTabbedPanel.getTabCount()) {
                try {
                    findAndReplaceInSheet(i,
                            searchFor,
                            replaceText,
                            matchCase,
                            regex,
                            searchHorizontally,
                            backward,
                            replace);
                    return;
                } catch (CellNotFoundException ex) {
                    i++;
                }
            }
            if (i >= mainTabbedPanel.getTabCount()) {
                throw new CellNotFoundException();
            }
        }
    }

    private void findAndReplaceInSheet(int sheetIndex,
            String searchFor,
            String replaceText,
            boolean matchCase,
            boolean regex,
            boolean searchHorizontally,
            boolean backward,
            boolean replace) {
        Component component = mainTabbedPanel.getComponent(sheetIndex);
        if (component instanceof SheetPanel) {
            this.mainTabbedPanel.setSelectedComponent(component);
            ExcelTable excelTable = ((SheetPanel) component).getExcelTable();
            if (excelTable != null) {
                excelTable.findAndReplace(searchFor,
                        replaceText,
                        matchCase,
                        regex,
                        searchHorizontally,
                        backward,
                        replace);
            }
        }
    }

    private void findAndReplaceInSelectedSheet(String searchFor,
            String replaceText,
            boolean matchCase,
            boolean regex,
            boolean searchHorizontally,
            boolean backward,
            boolean replace) {
        ExcelTable excelTable = findSelectedExcelTable();
        if (excelTable != null) {
            excelTable.findAndReplace(searchFor,
                    replaceText, matchCase, regex, searchHorizontally, backward, replace);
        }
    }

    public void replaceAll(String searchFor,
            String replaceText,
            boolean matchCase,
            boolean regex,
            boolean searchAllSheets) {
        if (searchAllSheets) {
            mainTabbedPanel.setSelectedIndex(0);
            replaceAllinAllSheets(searchFor, replaceText, matchCase, regex);
        } else {
            replaceAllInSheet(mainTabbedPanel.getSelectedIndex(),
                    searchFor, replaceText, matchCase, regex);
        }
    }

    private void replaceAllInSheet(int sheetIndex,
            String searchFor,
            String replaceText,
            boolean matchCase,
            boolean regex) {
        Component component = mainTabbedPanel.getComponent(sheetIndex);
        if (component instanceof SheetPanel) {
            this.mainTabbedPanel.setSelectedComponent(component);
            ExcelTable excelTable = ((SheetPanel) component).getExcelTable();
            if (excelTable != null) {
                excelTable.replaceAll(searchFor, replaceText, matchCase, regex);
            }
        }
    }

    private void replaceAllinAllSheets(String searchFor,
            String replaceText,
            boolean matchCase,
            boolean regex) {
        for (int i = 0; i < mainTabbedPanel.getTabCount(); i++) {
            replaceAllInSheet(i, searchFor, replaceText, matchCase, regex);
        }
    }

}
