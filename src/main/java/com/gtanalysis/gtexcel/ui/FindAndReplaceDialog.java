package com.gtanalysis.gtexcel.ui;

import com.gtanalysis.gtexcel.exception.CellNotFoundException;
import javax.swing.JOptionPane;

/**
 *
 * @author nkabiliravi
 */
public class FindAndReplaceDialog extends javax.swing.JDialog {

    private final WorkbookPanel workbookPanel;

    /**
     * Creates new form FindAndReplaceDialog
     *
     * @param workbookPanel
     */
    public FindAndReplaceDialog(WorkbookPanel workbookPanel) {
        super((java.awt.Frame) null, false);
        this.workbookPanel = workbookPanel;
        initComponents();
    }

    public void showDialog() {
        this.setAlwaysOnTop(true);
        this.setLocationRelativeTo(workbookPanel);
        this.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        mainPanel = new javax.swing.JPanel();
        textBoxesPanel = new javax.swing.JPanel();
        searchForLabel = new javax.swing.JLabel();
        searchForTextField = new javax.swing.JTextField();
        replaceWithLabel = new javax.swing.JLabel();
        replaceWithTextField = new javax.swing.JTextField();
        checkBoxesPanel = new javax.swing.JPanel();
        backwardCheckBox = new javax.swing.JCheckBox();
        matchCaseCheckBox = new javax.swing.JCheckBox();
        regexCheckBox = new javax.swing.JCheckBox();
        searchAllSheetsCheckBox = new javax.swing.JCheckBox();
        searchHorizontallyCheckBox = new javax.swing.JCheckBox();
        findReplaceButtonsPanel = new javax.swing.JPanel();
        findButton = new javax.swing.JButton();
        buttonsSeparator = new javax.swing.JSeparator();
        replaceButton = new javax.swing.JButton();
        replaceAllButton = new javax.swing.JButton();
        buttonsGapPanel = new javax.swing.JPanel();
        buttonsPanel = new javax.swing.JPanel();
        closeButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Find & Replace");
        setMinimumSize(new java.awt.Dimension(450, 300));
        setPreferredSize(new java.awt.Dimension(450, 300));
        getContentPane().setLayout(new java.awt.GridBagLayout());

        mainPanel.setLayout(new java.awt.GridBagLayout());

        textBoxesPanel.setLayout(new java.awt.GridBagLayout());

        searchForLabel.setText("Search For (Regex pattern e.g. ([0-9])+\\.0{1})");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 10);
        textBoxesPanel.add(searchForLabel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 10);
        textBoxesPanel.add(searchForTextField, gridBagConstraints);

        replaceWithLabel.setText("Replace with (Regex grouping e.g. $1test$2)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 10);
        textBoxesPanel.add(replaceWithLabel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 10);
        textBoxesPanel.add(replaceWithTextField, gridBagConstraints);

        checkBoxesPanel.setLayout(new java.awt.GridLayout(3, 2));

        backwardCheckBox.setText("Backward");
        checkBoxesPanel.add(backwardCheckBox);

        matchCaseCheckBox.setText("Match Case");
        checkBoxesPanel.add(matchCaseCheckBox);

        regexCheckBox.setText("Regular Expressions");
        checkBoxesPanel.add(regexCheckBox);

        searchAllSheetsCheckBox.setText("Search in all sheets");
        checkBoxesPanel.add(searchAllSheetsCheckBox);

        searchHorizontallyCheckBox.setText("Search Horizontally");
        checkBoxesPanel.add(searchHorizontallyCheckBox);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 10);
        textBoxesPanel.add(checkBoxesPanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        mainPanel.add(textBoxesPanel, gridBagConstraints);

        findReplaceButtonsPanel.setLayout(new java.awt.GridBagLayout());

        findButton.setText("Find");
        findButton.setMinimumSize(new java.awt.Dimension(100, 30));
        findButton.setPreferredSize(new java.awt.Dimension(100, 25));
        findButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 10);
        findReplaceButtonsPanel.add(findButton, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 10);
        findReplaceButtonsPanel.add(buttonsSeparator, gridBagConstraints);

        replaceButton.setText("Replace");
        replaceButton.setMinimumSize(new java.awt.Dimension(100, 30));
        replaceButton.setPreferredSize(new java.awt.Dimension(100, 25));
        replaceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                replaceButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 10);
        findReplaceButtonsPanel.add(replaceButton, gridBagConstraints);

        replaceAllButton.setText("Replace All");
        replaceAllButton.setMinimumSize(new java.awt.Dimension(100, 30));
        replaceAllButton.setPreferredSize(new java.awt.Dimension(100, 25));
        replaceAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                replaceAllButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 10);
        findReplaceButtonsPanel.add(replaceAllButton, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        findReplaceButtonsPanel.add(buttonsGapPanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.weighty = 1.0;
        mainPanel.add(findReplaceButtonsPanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(mainPanel, gridBagConstraints);

        buttonsPanel.setLayout(new java.awt.GridBagLayout());

        closeButton.setText("Close");
        closeButton.setMinimumSize(new java.awt.Dimension(100, 30));
        closeButton.setPreferredSize(new java.awt.Dimension(100, 25));
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 10);
        buttonsPanel.add(closeButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(buttonsPanel, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        setVisible(false);
    }//GEN-LAST:event_closeButtonActionPerformed

    private void findButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findButtonActionPerformed
        try {
            this.workbookPanel.findAndReplace(
                    searchForTextField.getText(),
                    null,
                    matchCaseCheckBox.isSelected(),
                    regexCheckBox.isSelected(),
                    searchAllSheetsCheckBox.isSelected(),
                    searchHorizontallyCheckBox.isSelected(),
                    backwardCheckBox.isSelected(),
                    false
            );
        } catch (CellNotFoundException ex) {
            JOptionPane.showMessageDialog(this, String.format("'%s' not found", searchForTextField.getText()),
                    "Not Found",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_findButtonActionPerformed

    private void replaceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_replaceButtonActionPerformed
        try {
            this.workbookPanel.findAndReplace(
                    searchForTextField.getText(),
                    replaceWithTextField.getText(),
                    matchCaseCheckBox.isSelected(),
                    regexCheckBox.isSelected(),
                    searchAllSheetsCheckBox.isSelected(),
                    searchHorizontallyCheckBox.isSelected(),
                    backwardCheckBox.isSelected(),
                    true
            );
        } catch (CellNotFoundException ex) {
            JOptionPane.showMessageDialog(this, String.format("'%s' not found", searchForTextField.getText()),
                    "Not Found",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_replaceButtonActionPerformed

    private void replaceAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_replaceAllButtonActionPerformed
        // TODO add your handling code here:
        try {
            this.setModal(true);
            this.workbookPanel.replaceAll(
                    searchForTextField.getText(),
                    replaceWithTextField.getText(),
                    matchCaseCheckBox.isSelected(),
                    regexCheckBox.isSelected(),
                    searchAllSheetsCheckBox.isSelected());
            this.setModal(false);
        } catch (CellNotFoundException ex) {
            this.setModal(false);
            JOptionPane.showMessageDialog(this, String.format("'%s' not found", searchForTextField.getText()),
                    "Not Found",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_replaceAllButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox backwardCheckBox;
    private javax.swing.JPanel buttonsGapPanel;
    private javax.swing.JPanel buttonsPanel;
    private javax.swing.JSeparator buttonsSeparator;
    private javax.swing.JPanel checkBoxesPanel;
    private javax.swing.JButton closeButton;
    private javax.swing.JButton findButton;
    private javax.swing.JPanel findReplaceButtonsPanel;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JCheckBox matchCaseCheckBox;
    private javax.swing.JCheckBox regexCheckBox;
    private javax.swing.JButton replaceAllButton;
    private javax.swing.JButton replaceButton;
    private javax.swing.JLabel replaceWithLabel;
    private javax.swing.JTextField replaceWithTextField;
    private javax.swing.JCheckBox searchAllSheetsCheckBox;
    private javax.swing.JLabel searchForLabel;
    private javax.swing.JTextField searchForTextField;
    private javax.swing.JCheckBox searchHorizontallyCheckBox;
    private javax.swing.JPanel textBoxesPanel;
    // End of variables declaration//GEN-END:variables
}
