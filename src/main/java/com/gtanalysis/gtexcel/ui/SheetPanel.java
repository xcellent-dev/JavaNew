package com.gtanalysis.gtexcel.ui;

import com.gtanalysis.gtexcel.model.ExcelCellRange;
import com.gtanalysis.gtexcel.model.ExcelChartModel;
import com.gtanalysis.gtexcel.model.ExcelChartType;
import com.gtanalysis.gtexcel.model.ExcelTableModel;
import com.gtanalysis.gtexcel.model.WorkbookModel;
import com.gtanalysis.gtexcel.model.listener.ChartListener;
import java.awt.print.Printable;
import java.util.List;
import javax.swing.JScrollPane;
import javax.swing.JSplitPane;
import org.jfree.chart.ChartPanel;

/*
 */
/**
 *
 * @author nkabiliravi
 */
public class SheetPanel extends javax.swing.JPanel {

    private final WorkbookPanel workbookPanel;
    private ExcelChartPanel excelChartPanel;
    private JScrollPane chartScrollPane;

    /**
     * Creates new form SheetPanel
     *
     * @param workbookPanel
     */
    public SheetPanel(WorkbookPanel workbookPanel) {
        this.workbookPanel = workbookPanel;
        initComponents();
    }

    public void addChartListener(ChartListener listener) {
        this.excelChartPanel.addChartListener(listener);
    }

    public void removeChartListener(ChartListener listener) {
        this.excelChartPanel.removeChartListener(listener);
    }

    public ExcelTable getExcelTable() {
        return excelTable;
    }

    public void setExcelTableModel(ExcelTableModel excelTableModel) {
        this.excelTable.setModel(excelTableModel);
        this.hideChartPanel();
        initChartPanel();
    }

    public ExcelTableModel getExcelTableModel() {
        return (ExcelTableModel) this.excelTable.getModel();
    }

    public String getSheetName() {
        return getExcelTableModel().getSheet().getSheetName();
    }

    public String[] retrieveCellNames() {
        return ((ExcelTableModel) this.getExcelTable().getModel()).retrieveCellNames();
    }

    public WorkbookModel getWorkbookModel() {
        return workbookPanel.getWorkbookModel();
    }

    public WorkbookPanel getWorkbookPanel() {
        return workbookPanel;
    }

    public void createChart(String chartTitle,
            ExcelChartType chartType,
            ExcelCellRange xLabelRange,
            ExcelCellRange yLabelRange,
            List<ExcelCellRange> xDataRanges,
            List<ExcelCellRange> yDataRanges) {
        excelChartPanel.createChart(chartTitle,
                chartType,
                getSheetName(),
                xLabelRange,
                yLabelRange,
                xDataRanges,
                yDataRanges);
    }

    public void editChart(String chartTitle,
            ExcelChartType chartType,
            ExcelCellRange xLabelRange,
            ExcelCellRange yLabelRange,
            List<ExcelCellRange> xDataRanges,
            List<ExcelCellRange> yDataRanges) {
        excelChartPanel.editChart(chartTitle,
                chartType,
                xLabelRange,
                yLabelRange,
                xDataRanges,
                yDataRanges);
    }

    public void removeSelectedChart() {
        excelChartPanel.removeSelectedChart();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sheetSplitPane = new javax.swing.JSplitPane();
        excelScrollPane = new javax.swing.JScrollPane();
        excelTable = new com.gtanalysis.gtexcel.ui.ExcelTable();

        sheetSplitPane.setDividerLocation(200);
        sheetSplitPane.setDividerSize(20);
        sheetSplitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.PAGE_AXIS));

        excelScrollPane.setViewportView(excelTable);

        add(excelScrollPane);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane excelScrollPane;
    private com.gtanalysis.gtexcel.ui.ExcelTable excelTable;
    private javax.swing.JSplitPane sheetSplitPane;
    // End of variables declaration//GEN-END:variables

    public void storeCellsSize() {
        excelTable.storeCellsSize();
    }

    public void loadCellsSize() {
        this.excelTable.loadCellsSize();

    }

    private void initChartPanel() {
        chartScrollPane = new JScrollPane();
        excelChartPanel = new ExcelChartPanel(workbookPanel);
        excelChartPanel.loadCharts(getSheetName());
        chartScrollPane.setViewportView(excelChartPanel);
    }

    private void showChartPanel() {
        this.removeAll();
        JSplitPane splitPane = new JSplitPane();
        splitPane.setOrientation(JSplitPane.VERTICAL_SPLIT);
        splitPane.setLeftComponent(excelScrollPane);

        splitPane.setRightComponent(chartScrollPane);
        splitPane.setDividerLocation(0.5);
        this.add(splitPane);
        updateUI();
    }

    private void hideChartPanel() {
        this.removeAll();
        this.add(excelScrollPane);
        updateUI();
    }
    
     
    public List<Printable> getPrintableChartPanels() {
        return this.excelChartPanel.getPrintableChartPanels();
    }

    public ChartPanel getSelectedChartPanel() {
        return this.excelChartPanel.getSelectedChartPanel();
    }

    public ExcelChartModel getSelectedChartModel() {
        return this.excelChartPanel.getSelectedChartModel();
    }

    public String getSelectedChartTitle() {
        return this.excelChartPanel.getSelectedChartTitle();
    }

    public boolean isChartPanelVisible() {
        return this.getComponentCount() > 0 && this.getComponent(0) instanceof JSplitPane;
    }

    public void setChartPanelVisible(boolean visible) {
        if (visible) {
            showChartPanel();
        } else {
            hideChartPanel();
        }
        firePropertyChange("chartPanelVisible", !isChartPanelVisible(), isChartPanelVisible());
    }

}
